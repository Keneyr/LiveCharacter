using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Ps2D
{

    /// <summary>
    /// The document generated by the Photoshop plugin.
    /// </summary>
    [System.Serializable]
    public class LayerMap : ISerializationCallbackReceiver
    {

        /// <summary>
        /// The version of the document that has been loaded.
        /// </summary>
        public string version;

        /// <summary>
        /// Gets the size of this document.
        /// </summary>
        public PixelBounds bounds;

        /// <summary>
        /// The root layer that holds all the other layers.
        /// </summary>
        [NonSerialized]
        public Layer root;

        /// <summary>
        /// A cached version of the layers.
        /// </summary>
        [NonSerialized]
        public List<Layer> allLayers;

        /// <summary>
        /// A Serialized list of layers.
        /// </summary>
        public List<SerializedLayer> serializedLayers;

        /// <summary>
        /// Unity fires this before serializing.  We recreate our custom
        /// bucket of serialized layers because Unity doesn't like serializing
        /// objects that have references to themselves.  Like a tree.
        /// </summary>
        public void OnBeforeSerialize()
        {
            if (serializedLayers == null)
            {
                serializedLayers = new List<SerializedLayer>();
            }
            serializedLayers.Clear();
            if (root != null)
            {
                AddLayerToSerializedLayers(root);
            }
        }

        /// <summary>
        /// Unity fires this right after deserializing.  Let's recreate
        /// our object hierarchy.
        /// </summary>
        public void OnAfterDeserialize()
        {
            if (allLayers == null) {
                allLayers = new List<Layer>();
            }
            allLayers.Clear();
            if (serializedLayers.Count > 0) {
                root = ReadLayerFromSerializedLayers(0);
            } else {
                root = new Layer();
                allLayers.Add(root);
            }
        }

        // Convert this layer & children into a serialized version.
        void AddLayerToSerializedLayers(Layer layer)
        {
            var serializedLayer                = new SerializedLayer();
            serializedLayer.photoshopLayerId   = layer.photoshopLayerId;
            serializedLayer.photoshopLayerName = layer.photoshopLayerName;
            serializedLayer.hierarchyString    = layer.hierarchyString;
            serializedLayer.bounds             = layer.bounds;
            serializedLayer.isVisible          = layer.isVisible;
            serializedLayer.order              = layer.order;
            serializedLayer.indentLevel        = layer.indentLevel;
            if (layer.layers != null) {
                serializedLayer.childCount     = layer.layers.Count;
            } else {
                serializedLayer.childCount     = 0;
            }
            serializedLayer.indexOfFirstChild  = serializedLayers.Count + 1;

            serializedLayers.Add(serializedLayer);

            if (layer.layers != null) {
                foreach (var childLayer in layer.layers) {
                    AddLayerToSerializedLayers(childLayer);
                }
            }
        }

        // Turn a serialized version back into a real layer (including children).
        Layer ReadLayerFromSerializedLayers(int index)
        {
            var serializedLayer = serializedLayers[index];
            var children = new List<Layer>();

            for (int i=0; i!= serializedLayer.childCount; i++) {
                children.Add(ReadLayerFromSerializedLayers(serializedLayer.indexOfFirstChild + i));
            }

            var layer = new Layer();
            layer.photoshopLayerId   = serializedLayer.photoshopLayerId;
            layer.photoshopLayerName = serializedLayer.photoshopLayerName;
            layer.hierarchyString    = serializedLayer.hierarchyString;
            layer.bounds             = serializedLayer.bounds;
            layer.isVisible          = serializedLayer.isVisible;
            layer.order              = serializedLayer.order;
            layer.indentLevel        = serializedLayer.indentLevel;
            layer.layers             = children;
            allLayers.Add(layer);

            return layer;
        }

    }

}
